@page "/Game"
@using System.Linq;
@using QuickClipBlazor.Services
@inject IJSRuntime JsRuntime;
@inject SessionHolder SessionHolder
@inject NavigationManager NavigationManager

<audio src="@CorrectAnswer?.PreviewUrl" autoplay></audio>
<style>
    /* Based on: https://css-tricks.com/timer-bars-in-css-with-custom-properties/ */
    .round-time-bar {
      margin: 1rem;
      overflow: hidden;
    }
    .round-time-bar div {
      transform-origin: left center;
    }
    
    .long-timer div {
        animation: roundtime-long 30s linear forwards;
    }
    
    .short-timer div {
        animation: roundtime-short 3.5s linear forwards;
    }
    
    /* Two identical keyframes so we can reset the animation without javascript */
    @@keyframes roundtime-short {
      to {
        /* More performant than `width` */
        transform: scaleX(0);
      }
    }
    
    @@keyframes roundtime-long {
          to {
            /* More performant than `width` */
            transform: scaleX(0);
          }
        }

</style>

<h1 style="text-align: center">
    @if (!ShowCorrectAnswer)
    {
        <span>What's this song?</span>
    }
    else
    {
        <span>@(IsCorrect ? "Correct!" : "Wrong!")</span>
    }
</h1>
<div class="progress progress-striped round-time-bar @(ShowCorrectAnswer ? "short-timer" : "long-timer")" data-style="smooth">
    <div class="progress-bar" id="timerBar" role="progressbar" aria-valuenow="30" aria-valuemin="0" aria-valuemax="30" style="width: 100%;">
        <span id="timerText"></span>
    </div>
</div>

<div id="questions">
    <a href="#" id="tapToPlay" class="btn btn-primary" style="display:none">Tap to play song</a>
    @foreach (var choice in Choices)
    {
        <h2>
            <a class="btn btn-large @(GetButtonColor(choice)) btn-block" @onclick="async () => await SelectAnswer(choice)">@choice.Title</a>
        </h2>
    }
</div>
<div class="deezerLogo" style="text-align: center">
    Powered by <img src="DZ_Logo_CMYK_W.png">
</div>

@code {
    public GameSession Session { get; set; }

    public List<DeezerTrack> Choices { get; set; } = new List<DeezerTrack>();

    public DeezerTrack CorrectAnswer { get; set; }

    public bool ShowCorrectAnswer { get; set; }

    public bool IsCorrect { get; set; }
    

    private List<DeezerTrack> _songs = new List<DeezerTrack>();
    
    private readonly Random _random = new Random();
    
    protected override async Task OnInitializedAsync()
    {
        if (SessionHolder.Session == null)
        {
            NavigationManager.NavigateTo("/");
        }
        Session = SessionHolder.Session;
        _songs = (await DeezerService.GetTopTracksForArtist(Session.CurrentArtist.Id)).ToList();
        GetNextSong();
    }

    private void GetNextSong()
    {
        ShowCorrectAnswer = false;
        Choices = _songs.OrderBy(f => Guid.NewGuid()).Take(4).ToList();
        CorrectAnswer = Choices[_random.Next(0, 4)];
        _songs.Remove(CorrectAnswer);
    }

    private async Task SelectAnswer(DeezerTrack choice)
    {
        IsCorrect = choice == CorrectAnswer;

        if (IsCorrect)
        {
            Session.Score += 100;
        }

        Session.RoundResults.Add(new RoundResult()
        {
            Round = Session.Round,
            CorrectAnswer = CorrectAnswer,
            SelectedAnswer = choice,
            IsCorrect = IsCorrect
        });

        SessionHolder.NotifyStateChanged();

        ShowCorrectAnswer = true;
        StateHasChanged();
        await Task.Delay(3500);
        
        if (Session.Round + 1 > Session.TotalRounds)
        {
            NavigationManager.NavigateTo("Results");
            return;
        }
        
        //NOTE: Don't increment this in the if statement so the final round count is correct
        Session.Round++;
        
        GetNextSong();
    }

    private object GetButtonColor(DeezerTrack choice)
    {
        if (ShowCorrectAnswer)
        {
            if (choice == CorrectAnswer)
            {
                return "btn-success";
            }
            return "btn-danger";
        }

        return "btn-primary";
    }

}