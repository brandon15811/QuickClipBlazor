@page "/Game"
@page "/Game/{sessionId}"
@using System.Linq
@inject SessionManager SessionManager
@inject NavigationManager NavigationManager

<style>
    /* Based on: https://css-tricks.com/timer-bars-in-css-with-custom-properties/ */
    .round-time-bar {
      margin: 1rem;
      overflow: hidden;
    }
    .round-time-bar div {
      transform-origin: left center;
    }
    
    .long-timer div {
        animation: roundtime-long 30s linear forwards;
    }
    
    .short-timer div {
        animation: roundtime-short 3.25s linear forwards;
    }
    
    /* Two identical keyframes so we can reset the animation without javascript */
    @@keyframes roundtime-short {
      to {
        /* More performant than `width` */
        transform: scaleX(0);
      }
    }
    
    @@keyframes roundtime-long {
          to {
            /* More performant than `width` */
            transform: scaleX(0);
          }
        }

</style>
<audio src="@Session?.CorrectAnswer?.PreviewUrl" autoplay></audio>
@if (HasEnoughSongs) {
    <h1 style="text-align: center">
        @if (!ShowCorrectAnswer)
        {
            <span>What's this song?</span>
        }
        else
        {
            <span>@(IsCorrect ? "Correct!" : "Wrong!")</span>
        }
    </h1>
    <div class="progress progress-striped round-time-bar @(ShowCorrectAnswer ? "short-timer" : "long-timer")" data-style="smooth">
        <div class="progress-bar" id="timerBar" role="progressbar" aria-valuenow="30" aria-valuemin="0" aria-valuemax="30" style="width: 100%;">
            <span id="timerText"></span>
        </div>
    </div>

    <div id="questions">
        <a href="#" id="tapToPlay" class="btn btn-primary" style="display:none">Tap to play song</a>
        @foreach (var choice in Session.Choices)
        {
            <h2>
                <a class="btn btn-large @(GetButtonColor(choice)) btn-block" @onclick="async () => await SelectAnswer(choice)">@choice.Title</a>
            </h2>
        }
    </div>
    <div class="deezerLogo" style="text-align: center">
        Powered by <img src="DZ_Logo_CMYK_W.png">
    </div>
}
else
{
    <h2 style="text-align: center">
        Sorry, the artist must have at least @NeededSongCount songs
    </h2>
}

@code {
    [Parameter]
    public string SessionId { get; set; }
    
    public GameSession Session { get; set; }

    public bool ShowCorrectAnswer { get; set; }

    public bool IsCorrect { get; set; }

    public bool HasEnoughSongs { get; set; } = true;
    
    public int NeededSongCount { get; set; }

    private readonly Random _random = new Random();
    private Guid _sessionGuid;
    
    protected override async Task OnInitializedAsync()
    {
        if (SessionManager.Session == null)
        {
            if (!Guid.TryParse(SessionId, out _sessionGuid) || !SessionManager.LoadSession(_sessionGuid))
            {
                NavigationManager.NavigateTo("/");
                return;
            }
        }
        
        Session = SessionManager.Session;

        _sessionGuid = Session.SessionId;

        if (Session.Songs == null)
        {
            Session.Songs = (await DeezerService.GetTopTracksForArtist(Session.CurrentArtist.Id)).ToList();
            NeededSongCount = Session.TotalRounds + 5;
            if (Session.Songs.Count < NeededSongCount)
            {
                HasEnoughSongs = false;
                Session.GameOver = true;
                SessionManager.NotifyStateChanged();
                SessionManager.ClearSession(_sessionGuid);
                return;
            }
            HasEnoughSongs = true;
            GetNextSong();
        }

        if (Session.ReadyForNextRound)
        {
            GoToNextRound();
        }
    }

    private void GetNextSong()
    {
        ShowCorrectAnswer = false;
        Session.ReadyForNextRound = false;
        Session.Choices = Session.Songs.OrderBy(f => Guid.NewGuid()).Take(4).ToList();
        Session.CorrectAnswer = Session.Choices[_random.Next(0, 4)];
        Session.Songs.Remove(Session.CorrectAnswer);
        SessionManager.NotifyStateChanged();
    }

    private async Task SelectAnswer(DeezerTrack choice)
    {
        if (Session.ReadyForNextRound)
        {
            return;
        }
        Session.ReadyForNextRound = true;
        IsCorrect = choice.Id == Session.CorrectAnswer.Id;

        if (IsCorrect)
        {
            Session.Score += 100;
        }

        Session.RoundResults.Add(new RoundResult()
        {
            Round = Session.Round,
            CorrectAnswer = Session.CorrectAnswer,
            SelectedAnswer = choice,
            IsCorrect = IsCorrect
        });

        SessionManager.NotifyStateChanged();

        ShowCorrectAnswer = true;
        StateHasChanged();
        await Task.Delay(3250);
        GoToNextRound();
    }

    private void GoToNextRound()
    {
        if (Session.Round + 1 > Session.TotalRounds)
        {
            Session.GameOver = true;
            NavigationManager.NavigateTo("Results");
            return;
        }
        
        //NOTE: Don't increment this in the if statement so the final round count is correct
        Session.Round++;
        
        GetNextSong();
    }

    private object GetButtonColor(DeezerTrack choice)
    {
        if (ShowCorrectAnswer)
        {
            return choice.Id == Session.CorrectAnswer.Id ? "btn-success" : "btn-danger";
        }

        return "btn-primary";
    }

}